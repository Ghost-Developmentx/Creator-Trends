# Stage 1: Build Stage
FROM node:18-alpine AS builder

WORKDIR /app

# Install necessary tools
RUN apk add --no-cache postgresql-client nano git

# Copy package files and install dependencies
COPY package*.json ./
RUN npm install

# Copy all files
COPY . .

# Switch to Docker environment and build the project
RUN node switch-env.js docker
RUN npm run build

# Stage 2: Production Stage
FROM node:18-alpine

WORKDIR /app

# Install necessary tools
RUN apk add --no-cache postgresql-client nano

# Copy package files and install production dependencies
COPY package*.json ./
RUN npm install --production && npm install module-alias

# Copy built files and necessary configurations from the builder stage
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/config ./config
COPY --from=builder /app/docs ./docs
COPY --from=builder /app/migrations ./migrations
COPY --from=builder /app/.env .env
COPY --from=builder /app/.env.docker .env.docker
COPY --from=builder /app/verifyBuild.js ./verifyBuild.js
COPY --from=builder /app/tsconfig.json ./tsconfig.json

# Verify the build
RUN node verifyBuild.js

# Expose the application port
EXPOSE 3001

# Start the application
CMD ["node", "-r", "module-alias/register", "dist/server.js"]
